import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import os
from dotenv import load_dotenv

load_dotenv()

logging.basicConfig(level=logging.INFO)


BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_USER_ID = os.getenv("ADMIN_USER_ID")
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class OrderStates(StatesGroup):
    waiting_for_payment_type = State()
    waiting_for_order_details = State()
    waiting_for_confirmation = State()

PAYMENT_TYPES = [
    "–ò–ü –¶–∞—Ü—É—Ä–∞ –ï.–ï.",
    "–ò–ü –¶–∞—Ü—É—Ä–∞ –î.–ï.", 
    "–ù–∞–ª–∏—á–Ω—ã–µ",
    "–û–û–û ¬´–°–∞–º—É—Ä–∞–π 24¬ª",
    "–û–û–û ¬´–ì–£–ê–†–î–î–û¬ª"
]

def get_payment_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=payment_type)] for payment_type in PAYMENT_TYPES],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
def get_confirmation_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_send"),
            InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_order")
        ]
    ])
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.set_state(OrderStates.waiting_for_payment_type)
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã:",
        reply_markup=get_payment_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã
@dp.message(OrderStates.waiting_for_payment_type)
async def process_payment_selection(message: types.Message, state: FSMContext):
    if message.text in PAYMENT_TYPES:
        await state.update_data(payment_type=message.text)
        await state.set_state(OrderStates.waiting_for_order_details)
        await message.answer(
            "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—É–º–º—É, —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º —Å–∫–∏–¥–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å.\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "–§–ª–µ—à–∫–∞ 64–≥–± 2—à—Ç. - 48 000\n"
            "–ú–∏–Ω–∏ –¥–∏—Å–∫ 1–¢–ë 1—à—Ç. - 22 000\n\n"
            "70 000 —Ä—É–±–ª–µ–π\n"
            "–° —É—á—ë—Ç–æ–º —Å–∫–∏–¥–∫–∏ 15%\n\n"
            "–û–û–û –ê–ù–ö–û–ú",
            reply_markup=types.ReplyKeyboardRemove()
        )
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø–ª–∞—Ç—ã")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
@dp.message(OrderStates.waiting_for_order_details)
async def process_order_details(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    payment_type = data.get("payment_type")
    order_details = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
    await state.update_data(order_details=order_details)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    preview_message = f"üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ:\n\n"
    preview_message += f"üí∞ –¢–∏–ø –æ–ø–ª–∞—Ç—ã: {payment_type}\n"
    preview_message += f"üì¶ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:\n{order_details}\n"
    preview_message += f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: @{message.from_user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
    preview_message += f"–í—Å—ë –≤–µ—Ä–Ω–æ? –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    await state.set_state(OrderStates.waiting_for_confirmation)
    await message.answer(
        preview_message,
        reply_markup=get_confirmation_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@dp.callback_query(lambda c: c.data in ["confirm_send", "edit_order"])
async def process_confirmation(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "confirm_send":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await send_order_to_admin(callback.message, state)
    elif callback.data == "edit_order":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
        await edit_order(callback.message, state)
    
    await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
async def send_order_to_admin(message: types.Message, state: FSMContext):
    data = await state.get_data()
    payment_type = data.get("payment_type")
    order_details = data.get("order_details")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_message = f"ÔøΩÔøΩ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
    admin_message += f"üí∞ –¢–∏–ø –æ–ø–ª–∞—Ç—ã: {payment_type}\n"
    admin_message += f"üì¶ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:\n{order_details}\n"
    admin_message += f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: @{message.from_user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ ID
        await bot.send_message(chat_id=ADMIN_USER_ID, text=admin_message)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {ADMIN_USERNAME} –≤ —Å–∏—Å—Ç–µ–º—É —É—á—ë—Ç–∞.\n\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
async def edit_order(message: types.Message, state: FSMContext):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
    await state.set_state(OrderStates.waiting_for_order_details)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—É–º–º—É, —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º —Å–∫–∏–¥–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å.\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–§–ª–µ—à–∫–∞ 64–≥–± 2—à—Ç. - 48 000\n"
        "–ú–∏–Ω–∏ –¥–∏—Å–∫ 1–¢–ë 1—à—Ç. - 22 000\n\n"
        "70 000 —Ä—É–±–ª–µ–π\n"
        "–° —É—á—ë—Ç–æ–º —Å–∫–∏–¥–∫–∏ 15%\n\n"
        "–û–û–û –ê–ù–ö–û–ú"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def echo_handler(message: types.Message):
    await message.answer(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞"
    )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# @dp.message(Command("myid"))
# async def cmd_myid(message: types.Message):
#     user_id = message.from_user.id
#     username = message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
#     await message.answer(f"–í–∞—à ID: {user_id}\nUsername: @{username}")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())